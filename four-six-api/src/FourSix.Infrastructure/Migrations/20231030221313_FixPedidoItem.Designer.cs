// <auto-generated />
using System;
using FourSix.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FourSix.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20231030221313_FixPedidoItem")]
    partial class FixPedidoItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FourSix.Domain.Entities.ClienteAggregate.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PagamentoAggregate.Pagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodigoQR")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Desconto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ValorPago")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorPedido")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("StatusId");

                    b.ToTable("Pagamento", (string)null);
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PagamentoAggregate.StatusPagamento", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StatusPagamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Descricao = "Aguardando Pagamento"
                        },
                        new
                        {
                            Id = (short)2,
                            Descricao = "Pago"
                        },
                        new
                        {
                            Id = (short)3,
                            Descricao = "Cancelado"
                        });
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroPedido"));

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("StatusId");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.PedidoCheckout", b =>
                {
                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DataStatus")
                        .HasColumnType("datetime2");

                    b.HasKey("PedidoId", "StatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("PedidoCheckout", (string)null);
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.PedidoItem", b =>
                {
                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemPedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("PedidoId", "ItemPedidoId");

                    b.HasIndex("ItemPedidoId");

                    b.ToTable("PedidoItem", (string)null);
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.StatusPedido", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StatusPedido", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Descricao = "Recebido"
                        },
                        new
                        {
                            Id = (short)2,
                            Descricao = "Pago"
                        },
                        new
                        {
                            Id = (short)3,
                            Descricao = "Em Preparação"
                        },
                        new
                        {
                            Id = (short)4,
                            Descricao = "Montagem"
                        },
                        new
                        {
                            Id = (short)5,
                            Descricao = "Pronto"
                        },
                        new
                        {
                            Id = (short)6,
                            Descricao = "Finalizado"
                        });
                });

            modelBuilder.Entity("FourSix.Domain.Entities.ProdutoAggregate.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Preco")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Produto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4250a8cb-78de-4260-b749-f9cb75e2b543"),
                            Ativo = true,
                            Categoria = 0,
                            Descricao = "Pão, carne, alface, tomate e maionese ESPECIAL",
                            Nome = "Burger Four",
                            Preco = 5.5m
                        },
                        new
                        {
                            Id = new Guid("18a977bd-54e2-4391-86e2-038ad6c72157"),
                            Ativo = true,
                            Categoria = 0,
                            Descricao = "Pão, carne, queijo, alface, tomate e maionese ESPECIAL",
                            Nome = "Burguer Six",
                            Preco = 7.5m
                        },
                        new
                        {
                            Id = new Guid("c14888c9-ed90-43dc-a695-41612beb258c"),
                            Ativo = true,
                            Categoria = 0,
                            Descricao = "Pão, carne, queijo, ovo, bacon, alface, tomate e maionese ESPECIAL",
                            Nome = "Burguer FourSix",
                            Preco = 10m
                        },
                        new
                        {
                            Id = new Guid("efaa0b05-5a6e-4a3e-9b00-f5f61613616d"),
                            Ativo = true,
                            Categoria = 3,
                            Descricao = "Coca-cola 600ml",
                            Nome = "Coca-cola",
                            Preco = 8.25m
                        },
                        new
                        {
                            Id = new Guid("49cf5138-8b2e-4e2f-9dbf-fe8a694ad327"),
                            Ativo = true,
                            Categoria = 3,
                            Descricao = "H2O 500ml",
                            Nome = "H2O",
                            Preco = 8.25m
                        },
                        new
                        {
                            Id = new Guid("3d1b783b-d184-4827-8bd4-f2a06dc697c0"),
                            Ativo = true,
                            Categoria = 3,
                            Descricao = "Suco Natural de Laranja 500ml",
                            Nome = "Suco Natural de Laranja",
                            Preco = 10m
                        },
                        new
                        {
                            Id = new Guid("21da57d4-4cfd-4831-a892-4c3eb79a18d1"),
                            Ativo = true,
                            Categoria = 1,
                            Descricao = "Batata Frita especial",
                            Nome = "Batata Frita",
                            Preco = 6.50m
                        },
                        new
                        {
                            Id = new Guid("fbeb1955-cafd-4737-a958-c7582aa95990"),
                            Ativo = true,
                            Categoria = 1,
                            Descricao = "Cebola empanada especial",
                            Nome = "Onion",
                            Preco = 8.25m
                        },
                        new
                        {
                            Id = new Guid("34e39816-b398-48ec-b20a-a9994f61d9d5"),
                            Ativo = true,
                            Categoria = 2,
                            Descricao = "Casquinha de sorvete de baunilha",
                            Nome = "Sorvete de Baunilha",
                            Preco = 1.25m
                        },
                        new
                        {
                            Id = new Guid("30425653-ca46-4b60-ab3b-2726cc52deff"),
                            Ativo = true,
                            Categoria = 2,
                            Descricao = "Bolo de chocolate com recheio de creme de morango",
                            Nome = "Bolo Sensação",
                            Preco = 3.25m
                        });
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PagamentoAggregate.Pagamento", b =>
                {
                    b.HasOne("FourSix.Domain.Entities.PedidoAggregate.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourSix.Domain.Entities.PagamentoAggregate.StatusPagamento", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.Pedido", b =>
                {
                    b.HasOne("FourSix.Domain.Entities.ClienteAggregate.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourSix.Domain.Entities.PedidoAggregate.StatusPedido", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.PedidoCheckout", b =>
                {
                    b.HasOne("FourSix.Domain.Entities.PedidoAggregate.Pedido", null)
                        .WithMany("HistoricoCheckout")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourSix.Domain.Entities.PedidoAggregate.StatusPedido", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.PedidoItem", b =>
                {
                    b.HasOne("FourSix.Domain.Entities.ProdutoAggregate.Produto", "ItemPedido")
                        .WithMany()
                        .HasForeignKey("ItemPedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourSix.Domain.Entities.PedidoAggregate.Pedido", null)
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemPedido");
                });

            modelBuilder.Entity("FourSix.Domain.Entities.PedidoAggregate.Pedido", b =>
                {
                    b.Navigation("HistoricoCheckout");

                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
